from sys import argv, exit
from PyQt5.QtWidgets import QApplication, QFrame, QLabel, QPushButton, QGridLayout, QVBoxLayout, QWidget
import requests
import logging
from time import perf_counter
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

class ArtistLife(QFrame):
    def __init__(self,name):
        super().__init__()
        self.setWindowTitle('About the Artist')
        text = QLabel(self.getArtistInfo(name))
        layout = QVBoxLayout()
        layout.addWidget(text)
        self.setLayout(layout)


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

lFormat = logging.Formatter('%(asctime)s:%(levelname)s:%(name)s:%(message)s')

fLog = logging.FileHandler('client.log')
fLog.setLevel(logging.INFO)
fLog.setFormatter(lFormat)

sHand = logging.StreamHandler()
sHand.setLevel(logging.WARNING)

logger.addHandler(fLog)
logger.addHandler(sHand)

class Client(QFrame):
    def  __init__(self):
        super().__init__()
        self.songLabel = QLabel('')
        self.artistLabel = QLabel('')
        self.artist = self.getArtist(self.getSongOfTheDay()['song'])
        self.playlistLabel = QLabel('')

        self.setWindowTitle('Song of the day')

        self.playlist_Button = QPushButton('Get Artist Top Tracks')
        self.playlist_Button.clicked.connect(self.playlistButton)
        self.playlist_Button.setEnabled(False)

        songButton = QPushButton('Get Song of the Day')
        songButton.clicked.connect(self.songButton)

        self.artist_Button = QPushButton('Get Artist')
        self.artist_Button.clicked.connect(self.artistButton)
        self.artist_Button.setEnabled(False)

        self.layout = QGridLayout()
        #QDesktopServices.openUrl(url=self.getSongLinkOfTheDay()['link'])

        #Adds all the widgets

        #Adds the widgets related to the song name
        self.layout.addWidget(self.songLabel,0,0)
        self.layout.addWidget(songButton,1,0)

        #Adds the widgets related to the artist
        self.layout.addWidget(self.artistLabel,2,0)
        self.layout.addWidget(self.artist_Button,3,0)

        #Adds the widgets related to the playlist
        widget = QVBoxLayout()
        widget.addWidget(self.playlistLabel)
        widget.addWidget(self.playlist_Button)
        widget2 = QWidget()
        widget2.setLayout(widget)
        self.layout.addWidget(widget2,4,0,10,0)

        #Sets the layout to be displayed
        self.setLayout(self.layout)

        self.show()
        self.setMinimumSize(255,300)

    def playlistButton(self,):
        #This deletes the playlist
        if self.playlistLabel.text():
            self.playlistLabel.setText('')
            #This gets the user id and unfollows the playlist generated by the other segment of code
        else:
            displayText = ''
            count = 1
            #This generates the playlist by parsing all of the top tracks and then adds those tracks to a playlist
            #After adding to a playlist it then outputs the external link to that playlist
            songList = self.getPlaylist(self.artist)
            for count,item in enumerate(songList):
                logger.debug(item)
                displayText += '{0}.{1}\n'.format(str(count+1),item[0])
            self.playlistLabel.setText(displayText)

    def songButton(self):
        if self.songLabel.text():
            self.songLabel.setOpenExternalLinks(False)
            self.songLabel.setText('')
        else:
            self.artist_Button.setEnabled(True)
            rSong = self.getSongOfTheDay()
            self.songLabel.setOpenExternalLinks(True)
            self.songLabel.setText(self.createText(rSong['song'],rSong['link']))
        
    def artistButton(self):
        if self.artistLabel.text():
            self.artistLabel.setText('')
        else:
            self.playlist_Button.setEnabled(True)
            self.artistLabel.setText(self.artist)

    def createText(self,song,link):
        if song:
            return '<a href={0}>{1}</a>'.format(link,song)
        else:
            return 'An error has occurred'

    def getSongOfTheDay(self):
        sCounter = perf_counter()
        #Put a try catch block here to prevent crashes
        response = requests.get(url='http://127.0.0.1:5002/',timeout=2.5)
        stCounter = perf_counter()
        if response.status_code != 404:
            song = response.json()
            logger.info(f'song latency time {stCounter-sCounter}')
        else:
            return None
        response.close()
        return song

    def getSongLinkOfTheDay(self):
        #Put a try catch block here to prevent crashes
        response = requests.get(url='http://127.0.0.1:5000/link',timeout=2.5)
        if response.status_code == 404:
            return None
        else:
            link = response.json()
        response.close()
        return link

    def getArtist(self,songName):
        song = songName.replace(' ','_')
        startCounter = perf_counter()
        response = requests.get(url='http://127.0.0.1:5000/song/'+song,timeout=2.5)
        stopCounter = perf_counter()
        if response.status_code == 404:
            return None
        elif response.status_code == 500:
            return None
        else:
            artist = response.text
            logger.info(f'artist latency time {stopCounter-startCounter}')
        response.close()
        artist = artist.strip()
        return artist.replace('"','')

    def getPlaylist(self, ArtistName):
        #access the spotify API
        startCounter = perf_counter()
        spotify = spotipy.Spotify(auth_manager = SpotifyClientCredentials("94ff9ccf4d28431fbb3f221971df753b", "4194d7a7264b4fa98444ba39a85314cd"))
		#search for the artist
        results=spotify.search(q="artist:"+ArtistName,type="artist")
        #extract the artist URI
        items = results['artists']['items']
        artist = items[0]
        #search for the top tracks for this artist
        top_tracks = spotify.artist_top_tracks(artist['uri'])
        stopCounter = perf_counter()
        logger.info(f'spotify web api timer {stopCounter-startCounter}')
        #create an empty playlist
        playlist = []
        #iterate through each top track
        for i in top_tracks['tracks']:
            logger.debug(i['name'])

        for i in top_tracks['tracks']:
            #append the important information for this track to the playlist
            playlist.append([i['name'],i['album']['name'],i['album']['release_date']])
        return playlist

if __name__ == '__main__':
    app = QApplication(argv)
    window = Client()

    exit(app.exec_())
