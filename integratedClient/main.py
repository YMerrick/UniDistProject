from sys import argv, exit
from PyQt5.QtWidgets import QApplication, QFrame, QLabel, QPushButton, QGridLayout, QVBoxLayout, QWidget
import requests
import logging
from time import perf_counter

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

lFormat = logging.Formatter('%(asctime)s:%(levelname)s:%(name)s:%(message)s')

fLog = logging.FileHandler('client.log')
fLog.setLevel(logging.INFO)
fLog.setFormatter(lFormat)



logger.addHandler(fLog)
logger.addHandler()

class Client(QFrame):
    def  __init__(self):
        super().__init__()
        self.songLabel = QLabel('')
        self.artistLabel = QLabel('')
        self.artist = self.getArtist(self.getSongOfTheDay()['song'])
        self.playlistLabel = QLabel('')

        self.setWindowTitle('Song of the day')

        playlistButton = QPushButton('Get Artist Top Tracks')
        playlistButton.clicked.connect(self.playlistButton)

        songButton = QPushButton('Get Song of the Day')
        songButton.clicked.connect(self.songButton)

        artistButton = QPushButton('Get Artist')
        artistButton.clicked.connect(self.artistButton)

        self.layout = QGridLayout()
        #QDesktopServices.openUrl(url=self.getSongLinkOfTheDay()['link'])

        #Adds all the widgets

        #Adds the widgets related to the song name
        self.layout.addWidget(self.songLabel,0,0)
        self.layout.addWidget(songButton,1,0)

        #Adds the widgets related to the artist
        self.layout.addWidget(self.artistLabel,2,0)
        self.layout.addWidget(artistButton,3,0)

        #Adds the widgets related to the playlist
        widget = QVBoxLayout()
        widget.addWidget(self.playlistLabel)
        widget.addWidget(playlistButton)
        widget2 = QWidget()
        widget2.setLayout(widget)
        self.layout.addWidget(widget2,4,0,10,0)

        #Sets the layout to be displayed
        self.setLayout(self.layout)

        self.show()
        self.setMinimumSize(255,300)

    def playlistButton(self,):
        #This deletes the playlist
        if self.playlistLabel.text():
            self.playlistLabel.setText('')
            #This gets the user id and unfollows the playlist generated by the other segment of code
        else:
            displayText = ''
            count = 1
            #This generates the playlist by parsing all of the top tracks and then adds those tracks to a playlist
            #After adding to a playlist it then outputs the external link to that playlist
            sID = self.getArtistSpotifyID(self.artist)
            songList = self.getTopTracks(sID)
            for item in songList:
                displayText += str(count) + '.' + item + '\n'
                count += 1
            self.playlistLabel.setText(displayText)

    def songButton(self):
        if self.songLabel.text():
            self.songLabel.setOpenExternalLinks(False)
            self.songLabel.setText('')
        else:
            rSong = self.getSongOfTheDay()
            self.songLabel.setOpenExternalLinks(True)
            self.songLabel.setText(self.createText(rSong['song'],rSong['link']))
        
    def artistButton(self):
        if self.artistLabel.text():
            self.artistLabel.setText('')
        else:
            self.artistLabel.setText(self.artist)

    def createText(self,song,link):
        if song:
            return '<a href={0}>{1}</a>'.format(link,song)
        else:
            return 'An error has occurred'

    def getSongOfTheDay(self):
        #Put a try catch block here to prevent crashes
        response = requests.get(url='http://127.0.0.1:5002/',timeout=2.5)
        if response.status_code != 404:
            song = response.json()
        else:
            return None
        response.close()
        return song

    def getSongLinkOfTheDay(self):
        #Put a try catch block here to prevent crashes
        response = requests.get(url='http://127.0.0.1:5000/link',timeout=2.5)
        if response.status_code == 404:
            return None
        else:
            link = response.json()
        response.close()
        return link

    def getArtist(self,songName):
        song = songName.replace(' ','_')
        response = requests.get(url='http://127.0.0.1:5000/song/'+song,timeout=2.5)
        if response.status_code == 404:
            return None
        elif response.status_code == 500:
            return None
        else:
            artist = response.text
        response.close()
        artist = artist.strip()
        return artist.replace('"','')

    #Takes the id and returns the top tracks
    '''def getTopTracks(self,sID):
        def parseName(sResponse):
            songList = list()
            for item in sResponse:
                songList.append(item['name'])
            return songList

        header = {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer BQCPL860BX2TjcGKilCKWgcHX_CzQqhWg67E43c377KBrI0N3FBsWOoHsBQ02uRhDLI4-cwb8lkDqCAqWh93Acaf8QArahOy7URNJSY9a-IvdFU3MwfbTWSQuHpYfqHKA-VaIVaiLG4423aR0mRB6QUA7GDP5NL3Q9g'
        }
        url = 'https://api.spotify.com/v1/artists/' + sID + '/top-tracks'
        param = {
            'market':'GB'
        }
        response = requests.get(url=url,params=param,headers=header).json()['tracks']
        return parseName(response)

    def getArtistSpotifyID(self,name):
        sID = None
        header = {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer BQCPL860BX2TjcGKilCKWgcHX_CzQqhWg67E43c377KBrI0N3FBsWOoHsBQ02uRhDLI4-cwb8lkDqCAqWh93Acaf8QArahOy7URNJSY9a-IvdFU3MwfbTWSQuHpYfqHKA-VaIVaiLG4423aR0mRB6QUA7GDP5NL3Q9g'
        }
        url = 'https://api.spotify.com/v1/search'
        param = {
            'q':name,
            'type':'artist',
            'market':'GB'
        }
        response = requests.get(url=url,params=param,headers=header)
        if response.status_code == 404:
            return None
        else:
            searchR = response.json()['artists']['items']
            for item in searchR:
                if item['name'] == name:
                    sID = item['id']
                    break
        return sID
    '''

if __name__ == '__main__':
    app = QApplication(argv)
    window = Client()

    exit(app.exec_())
