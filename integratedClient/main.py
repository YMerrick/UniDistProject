from sys import argv, exit
from PyQt5.QtWidgets import QApplication, QFrame, QLabel, QPushButton, QGridLayout
import requests

class Client(QFrame):
    def  __init__(self):
        super().__init__()
        self.songLabel = QLabel('')
        self.artistLabel = QLabel('')
        self.playlistLabel = QLabel('')

        self.setWindowTitle('Song of the day')

        playlistButton = QPushButton('Get Artist Playlist')
        playlistButton.clicked.connect(self.playlistButton)

        songButton = QPushButton('Get Song of the Day')
        songButton.clicked.connect(self.songButton)

        artistButton = QPushButton('Get Artist')
        artistButton.clicked.connect(self.artistButton)

        self.layout = QGridLayout()
        #QDesktopServices.openUrl(url=self.getSongLinkOfTheDay()['link'])

        #Adds all the widgets

        #Adds the widgets related to the song name
        self.layout.addWidget(self.songLabel,0,0)
        self.layout.addWidget(songButton,1,0)

        #Adds the widgets related to the artist
        self.layout.addWidget(self.artistLabel,2,0)
        self.layout.addWidget(artistButton,3,0)

        #Adds the widgets related to the playlist
        self.layout.addWidget(self.playlistLabel,4,0)
        self.layout.addWidget(playlistButton,5,0)

        #Sets the layout to be displayed
        self.setLayout(self.layout)

        self.show()
        self.setMinimumSize(255,50)

    def playlistButton(self):
        #This deletes the playlist
        if self.playlistLabel.text():
            self.playlistLabel.setText('')
            #This gets the user id and unfollows the playlist generated by the other segment of code
        else:
            #This generates the playlist by parsing all of the top tracks and then adds those tracks to a playlist
            #After adding to a playlist it then outputs the external link to that playlist
            self.playlistLabel.setText('Playlist should be generated here')

    def songButton(self):
        if self.songLabel.text():
            self.songLabel.setOpenExternalLinks(False)
            self.songLabel.setText('')
        else:
            rSong = self.getSongOfTheDay()
            self.songLabel.setOpenExternalLinks(True)
            self.songLabel.setText(self.createText(rSong['song'],rSong['link']))
        
    def artistButton(self):
        if self.artistLabel.text():
            self.artistLabel.setText('')
        else:
            rSong = self.getSongOfTheDay()['song']
            self.artistLabel.setText(self.getArtist(rSong))

    def createText(self,song,link):
        if song:
            return '<a href={0}>{1}</a>'.format(link,song)
        else:
            return 'An error has occurred'

    def getSongOfTheDay(self):
        #Put a try catch block here to prevent crashes
        response = requests.get(url='http://127.0.0.1:5002/',timeout=2.5)
        if response.status_code != 404:
            song = response.json()
        else:
            return None
        response.close()
        return song

    def getSongLinkOfTheDay(self):
        #Put a try catch block here to prevent crashes
        response = requests.get(url='http://127.0.0.1:5000/link',timeout=2.5)
        if response.status_code == 404:
            return None
        else:
            link = response.json()
        response.close()
        return link

    def getArtist(self,songName):
        song = songName.replace(' ','_')
        response = requests.get(url='http://127.0.0.1:5000/song/'+song,timeout=2.5)
        if response.status_code == 404:
            return None
        elif response.status_code == 500:
            return None
        else:
            artist = response.text
        response.close()
        artist = artist.strip()
        return artist.replace('"','')

if __name__ == '__main__':
    app = QApplication(argv)
    window = Client()

    exit(app.exec_())
